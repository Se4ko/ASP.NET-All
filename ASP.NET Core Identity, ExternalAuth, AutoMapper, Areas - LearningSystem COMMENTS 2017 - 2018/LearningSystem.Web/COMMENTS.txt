
Identity

Identity-to registrira edni Service-i,
koito moje da polzvame na gotovo,
za da suzdavame User-i, user Roles,
da Smenqme Paroli vsi4ko deto iskam da pravq s daden User.
Logvane na user - tova e setvane na Cookies i 
posle kato se vurne go razpoznava. 

Dava ni vuzmojnot za External Login,
prez OAuth (Supports: Facebook, Google, Microsoft, Tweeter accounds) i
tova se izpolzva s OWIN middleware (bazirano).

Ne e vurzano za ASP.NET moje na Consolen app da napravq Authentication.

Vsi4kite Identity neshta sa NuGet packet4eta(facebook..)
Identity informaciqta se pazqt v EF Code First baza danni.

Setup Identity based Authenticaion v MVC,
s 2 na4ina, (1-viq e OK):

1. Izpolzvaiki ASP.NET project Templates ot Visual Studio

2. Na ruka: install NugetPackages, manual config, create EF, 
   mappings (models), view models, controllers, views .. i 
   v Startup.cs: 
   app.UseAuthentication(); 


Required NuGet packages:

Microsoft.AspNetCore.Identity.EntityFrameworkCore 
Microsoft.AspNetCore.Identity
Microsoft.AspNetCore.Owin


Imam 2 Servic-a vajni:
 
1. UserManager<User>    - pravi pulen CRUD vurhu User-ite.
 
2. SignInManager<User>  - pozvolqva ni da logvame user, 
                          proverqvame parolata validna li e, 
                          da razlogvame user ..


Method-a Dobavq Roli: 
ApplicationBuilderExtensions() i 
posle v: Startup.cs: app.UseDatabaseMigration();                      
Imame 1 rolq i tq e Admin do tuk.




Remote Authentication:

Claims based Authentication
Raboti na Claims, 
kudeto vseki "Kleim" predstalqva par4ence informaciq za user-a i
e Key-Value pairs. 

Naprimer logvame se v Facebook i 
app-a ako iziskva ot Facebook da vzemem samo Email - tova e Claim,
primerno profilna snimka pak e Claim .. 

Toest nqkakvo malko par4ence informaciq za user-a i
sudurja Token, 
s koito s tozi Remote Authentication se Authent-ikirame.

User-a se authentikira v Facebook i 
toi dava informaciq na Application-a i
ot tam Application-a razpoznava tozi user, 
zashtoto e zapazil informaciqta za nego.


Kak se slu4va?

1. Usera pravi request kum app-a  

2. System redirect kum login na facebook, logva se uspeshno user-a

3. Facebook(external system-ata) vrushta obratno user informaciq kum app-a:
    (Email, profile image information, Token ..)

4. App-a pravi Request, dali Token-a e Validen?

5. Ako Token-a e Validen, puska usera da se logne s nego.

Kato cqlo Standarta, koito se polzva e OAuth2 i
moje da se polzva ot web, desktop, mobile apps.

relies - rilais - raz4ita.
App-a relies na nqkakuv vunshen Service za da raboti log-vaneto,
toest redirect-va kum Facebook, pita go i dava access na user-ite.

Za vseki otdelen type Authentikaciq si ima NugetPacket-i.

Login s Facebook:
Install NuGet package - Microsoft.AspNetCore.Authentication.Facebook i
v Startup.cs v ConfigureServices(IServiceCollection services) methoda vutre,
shte ni se poqvi:

services.AddAuthentication().AddFacebook( fo => 
{
  fo.AppId = Configuration["Authentication:Facebook:AppId"];  //tova e nqkakuv string koito facebook dava
  fo.AppSecret = Configuration["Authentication:Facebook:AppSecret"]  //tova e drug string koito facebook dava
});

Tova e vsi4ko, posle se poqvqva Facebook buton4e, clickna li go,
redirectva kum Facebook i iska login i ..

Za da go izpolzvam tova trqbva da sledvam stupkite: Folder: 13. Video: 02:05:20
https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/facebook-logins?tabs=aspnetcore2x

Ako iskam da vidq profilnata snimka na User-a, 
prosto da vidq v neta kakvi Climes vrushta Facebook i kak.


Vij Razor Engine & Filters - CameraBazaar COMMENTS.Web folder






UNIT & INTEGRATION TESTING
Vij folder: ASP.NET Core Unit Testing COMMENTS


Testvame Clasove & Method-i dali imat pravilna logika.
Ideqta e da testvame vsi4ki scenarii,
koito mogat da schupqt app-a.

Controllers
Testvame dali Controller-a raboti korektno: 
samite End-Point-i ili Status Code-ove .. ,
kato izpolzvame Facke-nati Repozitori-ta i Servic-i.

Izpolzvame Moq Framework.

Unit Testing - testvam direktno koda, 
malko par4ence ot logikata, 
method-ite ..

Integration Testing - testvam cqliq app:
vdigam server, pravq Request, polu4avam Response i
Validiram dali Response-a e corekten.

Problema e 4e sa po bavni,
zashtoto se vdiga Server.

Ideqta e s Unit Testing da se testva vsi4ko,
a Integration Test-vane za nai-vajnite osnovni neshta.


Integration Test,
Testva vsi4ko do bazata danni:

REST Service, 
Repository Layer, 
Data Access Layer, 
Data Base(nqkakv fake).

WEB API Integration Tests:
Trqbva da pokrivat - End point of the RESTful Services


Kak stava?

Pravq si Class Library (.NET Core) 

- pravim si takova Class Library za:
  Service Layer-a, Web Layer-a ... ako e po-maluk proekta, 
  moje da bude v edin proekt i po papki (Servises, Web, ..)


Vij sega CourceService.cs Line 22, method: SignUpStudentAsync()
Moje da testvame: Dali vrushta pravilni result-ati pri tursene ili 
drugo i dali sa podredeni pravilno(ako ima OrderBy(..)..) i dr.


Polzvame XUnit Framework for testing

Documentation 
http://xunit.github.io/

Prez Visual Studio konkretno kak ba4ka:
http://xunit.github.io/docs/getting-test-results-in-vsts

Instalirvam XUnit go v NuGet package v papka Project.Test
ili New XUnit Poject, 
posle instalirvam oshte NuGet package: xunit.runner.visualstudio,
posle instalirvam oshte NuGet package: FluentAssertions - tova e,
extensive set ox extension methods ..for testing.

Ako iskam da testvam async method, 
i az pravq async-ronen method.
Trqbva da sledvam AAA:
Arange
Act
Assert





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































