// Generated by CoffeeScript 1.4.0
(function() {
  var BATTLE_FIELD_SIZE, MESSAGES_POLLING_INTERVAL_IN_MS, UI_REFRESH_RATE_IN_MS, game, messagesBuffer, renderActiveGames, renderBattlefield, renderMessages, renderOpenGames, scope;

  MESSAGES_POLLING_INTERVAL_IN_MS = 1000;

  UI_REFRESH_RATE_IN_MS = 1000;

  BATTLE_FIELD_SIZE = 9;

  game = $('.js-game');

  scope = game.closest('.js-view').data('scope');

  scope.currentGameId = null;

  scope.gameIdStarter = {};

  messagesBuffer = ['Game entered'];

  if (!scope.persister.isLoggedIn()) {
    location.hash = '#!/';
    return;
  }

  $('.js-logout').click(function() {
    return scope.persister.logout().then(function() {
      return location.hash = '#!/';
    }).fail(function(err) {
      return messagesBuffer.push(JSON.parse(err.responseText).Message);
    });
  });

  $('.js-nickname').text(scope.persister.getNickname());

  $('.js-show-scores').click(function() {
    return $('#scores').modal({
      remote: 'templates/scores.html'
    });
  });

  $('.js-show-create-game').popover({
    placement: 'bottom',
    html: true,
    content: $('#js-create-game-template').text()
  });

  game.on('submit', '.js-create-game', function() {
    var data,
      _this = this;
    data = $(this).serializeObject();
    $(this).find('input, button').attr('disabled', 'disabled');
    return scope.persister.createGame(data).then(function() {
      $('[type = "submit"]', _this).addClass('btn-success').val('Game created.');
      return setTimeout(function() {
        return $('.js-show-create-game').popover('hide');
      }, 1000);
    }).fail(function(err) {
      var message, text;
      $(_this).find('input, button').removeAttr('disabled');
      message = JSON.parse(err.responseText).Message;
      text = $('<p class="text-error" />').text(message);
      $(_this).append(text);
      return text.delay(1000).fadeOut();
    });
  });

  renderOpenGames = function() {
    if (!scope.persister.isLoggedIn()) {
      return;
    }
    return scope.persister.getOpenGames().done(function(games) {
      var gameItemTemplate, html;
      gameItemTemplate = $('#js-game-item-template').text();
      html = games.map(function(game) {
        return Mustache.render(gameItemTemplate, game);
      }).join('');
      $('.js-open-games').html(html).find('li').click(function(e) {
        e.preventDefault();
        return $('.js-join-game').modal('show').data('id', $(this).data('id'));
      });
      return setTimeout(renderOpenGames, UI_REFRESH_RATE_IN_MS);
    }).fail(function(err) {
      messagesBuffer.push(JSON.parse(err.responseText).Message);
      return setTimeout(renderOpenGames, UI_REFRESH_RATE_IN_MS);
    });
  };

  renderOpenGames();

  $('.js-join-game').submit(function(e) {
    var data,
      _this = this;
    data = $(this).serializeObject();
    data.id = $(this).data('id');
    $(this).find('input, button').attr('disabled', 'disabled');
    return setTimeout(function() {
      $(_this).find('input, button').attr('disabled', 'disabled');
      return scope.persister.joinGame(data).done(function() {
        $(_this).find('input, button').removeAttr('disabled');
        alert('Game joined');
        return $(_this).modal('hide');
      }).fail(function(err) {
        var message, text;
        $(_this).find('input, button').removeAttr('disabled');
        message = JSON.parse(err.responseText).Message;
        text = $('<p class="text-error" />').text(message);
        $(_this).find('.modal-body').append(text);
        return text.delay(1000).fadeOut();
      });
    }, 500);
  });

  renderActiveGames = function() {
    if (!scope.persister.isLoggedIn()) {
      return;
    }
    return scope.persister.getMyActiveGames().done(function(games) {
      var elements, gameItemTemplate, html;
      gameItemTemplate = $('#js-game-item-template').text();
      html = games.map(function(game) {
        return Mustache.render(gameItemTemplate, game);
      }).join('');
      elements = $('.js-my-active-games').html(html).find('li');
      elements.click(function(e) {
        return e.preventDefault();
      }).filter('[data-status="in-progress"]').click(function() {
        $(this).siblings().removeClass('active');
        $(this).addClass('active');
        return renderBattlefield($(this).data('id'), true);
      });
      elements.filter('[data-id="' + scope.currentGameId + '"]').addClass('active');
      elements.filter('[data-status="full"]').click(function() {
        return scope.persister.startGame($(this).data('id')).done(function() {
          return alert('Game started');
        });
      });
      return setTimeout(renderActiveGames, UI_REFRESH_RATE_IN_MS);
    }).fail(function(err) {
      messagesBuffer.push(JSON.parse(err.responseText).Message);
      return setTimeout(renderActiveGames, UI_REFRESH_RATE_IN_MS);
    });
  };

  renderActiveGames();

  renderBattlefield = function(id) {
    if (!scope.persister.isLoggedIn()) {
      return;
    }
    return scope.persister.getMyColor(id, function(myColor) {
      return scope.persister.getGameField(id).done(function(data) {
        var cell, col, currentPlayer, mark, myTurn, renderUnits, row, rowEl, table, tbody, _i, _j;
        clearTimeout(renderBattlefield.timer);
        currentPlayer = data.inTurn;
        myTurn = currentPlayer === myColor;
        console.log('render', 'I am: ' + myColor, 'Current: ' + currentPlayer);
        scope.currentGameId = id;
        $('.js-battle-field-title').text(data.title);
        $('.js-battle-field-turn').text(data.turn);
        $('.js-battle-field-in-turn').text(data.inTurn);
        table = $('.js-battle-field');
        table.children().remove();
        tbody = $('<tbody />');
        for (row = _i = 0; 0 <= BATTLE_FIELD_SIZE ? _i < BATTLE_FIELD_SIZE : _i > BATTLE_FIELD_SIZE; row = 0 <= BATTLE_FIELD_SIZE ? ++_i : --_i) {
          rowEl = $('<tr />');
          for (col = _j = 0; 0 <= BATTLE_FIELD_SIZE ? _j < BATTLE_FIELD_SIZE : _j > BATTLE_FIELD_SIZE; col = 0 <= BATTLE_FIELD_SIZE ? ++_j : --_j) {
            cell = $('<td />');
            cell.data('row', row);
            cell.data('col', col);
            rowEl.append(cell);
          }
          tbody.append(rowEl);
        }
        table.append(tbody);
        table.removeClass('active-blue active-red');
        if (myTurn) {
          table.addClass("active-" + currentPlayer);
        }
        mark = function(startRow, startCol, unitType) {
          Unit;

          var Unit, distance, unit, _k, _results;
          switch (unitType) {
            case 'warrior':
              Unit = Warrior;
              break;
            case 'ranger':
              Unit = Ranger;
          }
          unit = new Unit();
          console.log('mark', startRow, startCol, unit.range);
          tbody.find('td').removeClass('rangeable').removeClass('movable');
          _results = [];
          for (row = _k = 0; 0 <= BATTLE_FIELD_SIZE ? _k < BATTLE_FIELD_SIZE : _k > BATTLE_FIELD_SIZE; row = 0 <= BATTLE_FIELD_SIZE ? ++_k : --_k) {
            _results.push((function() {
              var _l, _results1;
              _results1 = [];
              for (col = _l = 0; 0 <= BATTLE_FIELD_SIZE ? _l < BATTLE_FIELD_SIZE : _l > BATTLE_FIELD_SIZE; col = 0 <= BATTLE_FIELD_SIZE ? ++_l : --_l) {
                distance = Math.abs(row - startRow) + Math.abs(col - startCol);
                cell = tbody.find('tr').eq(row).find('td').eq(col);
                cell.data('distance', distance);
                if (distance <= unit.speed) {
                  cell.addClass('movable');
                }
                if (distance <= unit.range) {
                  _results1.push(cell.addClass('rangeable'));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        };
        renderUnits = function(units, color) {
          var currentColor, enemyColor, unit, _k, _len, _results;
          currentColor = color;
          enemyColor = color === 'red' ? 'blue' : 'red';
          _results = [];
          for (_k = 0, _len = units.length; _k < _len; _k++) {
            unit = units[_k];
            _results.push((function(startRow, startCol, unitType, unitId) {
              cell = tbody.find('tr').eq(unit.position.y).find('td').eq(unit.position.x);
              cell.addClass(unit.type);
              cell.attr('title', "Hit points: " + unit.hitPoints + "\nMode: " + unit.mode);
              cell.addClass(currentColor);
              if (myTurn && color === currentPlayer) {
                return cell.click(function() {
                  var possible;
                  tbody.find('td').removeClass('picked');
                  mark(startRow, startCol, unitType);
                  $(this).addClass('picked');
                  possible = tbody.find('.movable');
                  possible.add(tbody.find('.rangeable'));
                  return possible.click(function() {
                    var currentCol, currentRow, dataToSend;
                    currentRow = $(this).data('row');
                    currentCol = $(this).data('col');
                    dataToSend = {
                      unitId: unitId,
                      position: {
                        x: currentCol,
                        y: currentRow
                      }
                    };
                    try {
                      switch (false) {
                        case !($(this).is('.' + enemyColor) && $(this).hasClass('rangeable')):
                          console.log('attack');
                          return scope.persister.battleAttack(dataToSend, id).done(function() {
                            return renderBattlefield(id, false);
                          });
                        case !$(this).is('.' + currentColor):
                          console.log('defend');
                          return scope.persister.battleDefend(dataToSend.unitId, id).done(function() {
                            return renderBattlefield(id, false);
                          });
                        case !($(this).hasClass('movable') && $(this).hasClass('movable')):
                          console.log('move');
                          return scope.persister.battleMove(dataToSend, id).done(function() {
                            return renderBattlefield(id, false);
                          });
                      }
                    } catch (e) {
                      return alert(JSON.parse(err.responseText).Message);
                    }
                  });
                });
              }
            })(unit.position.y, unit.position.x, unit.type, unit.id));
          }
          return _results;
        };
        renderUnits(data.red.units, 'red');
        renderUnits(data.blue.units, 'blue');
        if (!myTurn) {
          return renderBattlefield.timer = setTimeout(function() {
            return renderBattlefield(id, false);
          }, UI_REFRESH_RATE_IN_MS);
        }
      });
    });
  };

  renderMessages = function() {
    if (!scope.persister.isLoggedIn()) {
      return;
    }
    scope.persister.getUnreadMessages().done(function(messages) {
      var msg, _i, _len;
      if (!(messages.length > 0)) {
        return;
      }
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        msg = messages[_i];
        switch (msg.type) {
          case 'game-move':
            renderBattlefield(msg.gameId, true);
            break;
          case 'game-finished':
            alert('game-finished');
        }
      }
      return Array.prototype.push.apply(messagesBuffer, messages.map(function(msg) {
        return msg.text;
      }));
    }).fail(function(err) {
      return messagesBuffer.push(JSON.parse(err.responseText).Message);
    });
    if (messagesBuffer.length > 0) {
      $('.js-messages-feed').prepend(messagesBuffer.map(function(msg) {
        return $('<p />').text(JSON.stringify(msg));
      }));
    }
    messagesBuffer.length = 0;
    return setTimeout(renderMessages, MESSAGES_POLLING_INTERVAL_IN_MS);
  };

  renderMessages();

}).call(this);
