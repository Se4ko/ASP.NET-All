// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var Course, School, Student, schoolRepository;

  Student = (function() {

    function Student(firstName, lastName, grade) {
      this.firstName = firstName;
      this.lastName = lastName;
      this.grade = grade;
      this.marks = {};
    }

    Student.prototype.addMark = function(course, mark) {
      return this.marks[course.title] = mark;
    };

    Student.prototype.getMark = function(course) {
      return this.marks[course.title];
    };

    Student.deserialize = function(studentData) {
      var student;
      student = new Student(studentData.firstName, studentData.lastName, parseInt(studentData.grade, 10));
      student.marks = studentData.marks;
      return student;
    };

    return Student;

  })();

  Course = (function() {

    function Course(title, startDate) {
      this.title = title;
      this.startDate = startDate;
      this.numberOfStudents = 0;
      this.students = [];
    }

    Course.prototype.addStudents = function(students) {
      var student, _i, _len;
      this.numberOfStudents += students.length;
      for (_i = 0, _len = students.length; _i < _len; _i++) {
        student = students[_i];
        this.students.push(student);
      }
      return this;
    };

    Course.deserialize = function(courseData) {
      var course;
      course = new Course(courseData.title, new Date(courseData.startDate));
      return course.addStudents(courseData.students.map(function(student) {
        return Student.deserialize(student);
      }));
    };

    return Course;

  })();

  School = (function() {

    function School(name, location, specialty) {
      this.name = name;
      this.location = location;
      this.specialty = specialty;
      this.numberOfCourses = 0;
      this.courses = [];
    }

    School.prototype.addCourse = function(courses) {
      var course, _i, _len;
      this.numberOfCourses += courses.length;
      for (_i = 0, _len = courses.length; _i < _len; _i++) {
        course = courses[_i];
        this.courses.push(course);
      }
      return this;
    };

    School.deserialize = function(schoolData) {
      var school;
      school = new School(schoolData.name, schoolData.location, schoolData.specialty);
      return school.addCourse(schoolData.courses.map(function(course) {
        return Course.deserialize(course);
      }));
    };

    return School;

  })();

  schoolRepository = (function() {

    function schoolRepository() {}

    schoolRepository.save = function(id, schoolsData) {
      return window.localStorage[id] = JSON.stringify(schoolsData);
    };

    schoolRepository.load = function(id) {
      return schoolRepository.deserialize(JSON.parse(window.localStorage[id]));
    };

    schoolRepository.deserialize = function(schooslData) {
      return schooslData.map(function(schoolData) {
        return School.deserialize(schoolData);
      });
    };

    return schoolRepository;

  })();

  this.schoolNS = {
    Student: Student,
    Course: Course,
    School: School,
    schoolRepository: schoolRepository
  };

  this.controls.buildSchoolsGridView = function(selector, schools) {
    var course, courseGrid, courseRow, school, schoolsGrid, student, studentGrid, studentRow, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    schoolsGrid = controls.GridView(selector);
    schoolsGrid.addHeader('Name', 'Location', 'Number of Courses', 'Specialty');
    for (_i = 0, _len = schools.length; _i < _len; _i++) {
      school = schools[_i];
      courseRow = schoolsGrid.addRow(school.name, school.location, school.numberOfCourses, school.specialty);
      if (!school.courses.length) {
        continue;
      }
      courseGrid = courseRow.getNestedGrid();
      courseGrid.addHeader('Title', 'Start date', 'Number of Students');
      _ref = school.courses;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        course = _ref[_j];
        studentRow = courseGrid.addRow(course.title, course.startDate, course.numberOfStudents);
        if (!course.students.length) {
          continue;
        }
        studentGrid = studentRow.getNestedGrid();
        studentGrid.addHeader('First Name', 'Last Name', 'Grade', 'Mark');
        _ref1 = course.students;
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          student = _ref1[_k];
          studentGrid.addRow(student.firstName, student.lastName, student.grade, student.getMark(course));
        }
      }
    }
    return schoolsGrid;
  };

  this.controls.getSchoolsGridViewData = function(grid) {
    var schoolsData;
    schoolsData = grid.data.map(function(schoolRow) {
      var schoolData, _ref, _ref1;
      schoolData = {
        name: schoolRow.data[0],
        location: schoolRow.data[1],
        specialty: schoolRow.data[3]
      };
      schoolData.courses = ((_ref = (_ref1 = schoolRow.nestedGrid) != null ? _ref1.data : void 0) != null ? _ref : []).map(function(courseRow) {
        var courseData, _ref, _ref1;
        courseData = {
          title: courseRow.data[0],
          startDate: courseRow.data[1]
        };
        courseData.students = ((_ref = (_ref1 = courseRow.nestedGrid) != null ? _ref1.data : void 0) != null ? _ref : []).map(function(studentRow) {
          var studentData;
          studentData = {
            firstName: studentRow.data[0],
            lastName: studentRow.data[1],
            grade: studentRow.data[2],
            marks: {}
          };
          studentData.marks[courseData.title] = studentRow.data[3];
          return studentData;
        });
        return courseData;
      });
      return schoolData;
    });
    return schoolRepository.deserialize(schoolsData);
  };

}).call(this);
